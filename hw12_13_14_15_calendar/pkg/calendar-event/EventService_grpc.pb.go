// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/calendar-event/EventService.proto

package calendar_event_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalendarEventClient is the client API for CalendarEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarEventClient interface {
	GetEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*Events, error)
}

type calendarEventClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarEventClient(cc grpc.ClientConnInterface) CalendarEventClient {
	return &calendarEventClient{cc}
}

func (c *calendarEventClient) GetEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/event.CalendarEvent/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarEventServer is the server API for CalendarEvent service.
// All implementations must embed UnimplementedCalendarEventServer
// for forward compatibility
type CalendarEventServer interface {
	GetEvents(context.Context, *GetUserEventsRequest) (*Events, error)
	mustEmbedUnimplementedCalendarEventServer()
}

// UnimplementedCalendarEventServer must be embedded to have forward compatible implementations.
type UnimplementedCalendarEventServer struct {
}

func (UnimplementedCalendarEventServer) GetEvents(context.Context, *GetUserEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedCalendarEventServer) mustEmbedUnimplementedCalendarEventServer() {}

// UnsafeCalendarEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarEventServer will
// result in compilation errors.
type UnsafeCalendarEventServer interface {
	mustEmbedUnimplementedCalendarEventServer()
}

func RegisterCalendarEventServer(s grpc.ServiceRegistrar, srv CalendarEventServer) {
	s.RegisterService(&CalendarEvent_ServiceDesc, srv)
}

func _CalendarEvent_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.CalendarEvent/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventServer).GetEvents(ctx, req.(*GetUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalendarEvent_ServiceDesc is the grpc.ServiceDesc for CalendarEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalendarEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.CalendarEvent",
	HandlerType: (*CalendarEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _CalendarEvent_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/calendar-event/EventService.proto",
}
